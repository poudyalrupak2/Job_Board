@model AICommunityPlatform.ViewModels.MessagingIndexViewModel
@{
    ViewData["Title"] = "Messages";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Messages</h1>
                    <p class="text-gray-600">Connect with your professional network</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <input type="text" id="searchMessages" placeholder="Search messages..."
                               class="w-64 px-4 py-2 pl-10 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                    <a href="/Community/Members" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        New Message
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Conversations List -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-900">
                            Conversations
                            @if (Model.TotalUnreadCount > 0)
                            {
                                <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    @Model.TotalUnreadCount
                                </span>
                            }
                        </h2>
                    </div>

                    <div class="divide-y divide-gray-200 max-h-96 overflow-y-auto">
                        @foreach (var conversation in Model.Conversations)
                        {
                            <div class="conversation-item p-4 hover:bg-gray-50 cursor-pointer @(conversation.UnreadCount > 0 ? "bg-blue-50" : "")"
                                 data-user-id="@conversation.ParticipantId">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0">
                                        @if (!string.IsNullOrEmpty(conversation.Participant.ProfilePicture))
                                        {
                                            <img class="w-10 h-10 rounded-full object-cover" src="@conversation.Participant.ProfilePicture" alt="@conversation.Participant.DisplayName">
                                        }
                                        else
                                        {
                                            <div class="w-10 h-10 bg-indigo-100 rounded-full flex items-center justify-center">
                                                <span class="text-indigo-600 font-semibold text-sm">
                                                    @conversation.Participant.FirstName.Substring(0, 1)@conversation.Participant.LastName.Substring(0, 1)
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="ml-3 flex-1">
                                        <div class="flex items-center justify-between">
                                            <p class="text-sm font-medium text-gray-900">@conversation.Participant.DisplayName</p>
                                            <p class="text-xs text-gray-500">@conversation.LastMessage.SentAt.ToString("MMM dd")</p>
                                        </div>
                                        <p class="text-sm text-gray-600 truncate">
                                            @(conversation.LastMessage.Content.Length > 50 ? conversation.LastMessage.Content.Substring(0, 50) + "..." : conversation.LastMessage.Content)
                                        </p>
                                        @if (conversation.UnreadCount > 0)
                                        {
                                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 mt-1">
                                                @conversation.UnreadCount new
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        @if (!Model.Conversations.Any())
                        {
                            <div class="p-12 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                </svg>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">No conversations yet</h3>
                                <p class="text-gray-600 mb-4">Start connecting with other members to begin messaging.</p>
                                <a href="/Community/Members" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                    Find Members
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Message Area -->
            <div class="lg:col-span-2">
                <div id="messageArea" class="bg-white rounded-lg shadow h-96 flex items-center justify-center">
                    <div class="text-center">
                        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                        </svg>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Select a conversation</h3>
                        <p class="text-gray-600">Choose a conversation from the list to start messaging.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Search Results Modal -->
<div id="searchModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-2/3 max-w-4xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">Search Results</h3>
                <button onclick="closeSearchModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="searchResults" class="max-h-96 overflow-y-auto">
                <!-- Search results will be populated here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentConversationId = null;
        let messageCheckInterval = null;

        document.addEventListener('DOMContentLoaded', function() {
            // Conversation item click handlers
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.addEventListener('click', function() {
                    const userId = this.dataset.userId;
                    loadConversation(userId);
                });
            });

            // Search functionality
            const searchInput = document.getElementById('searchMessages');
            searchInput.addEventListener('input', debounce(function() {
                if (this.value.length > 2) {
                    searchMessages(this.value);
                }
            }, 300));

            // Start checking for new messages
            startMessagePolling();
        });

        function loadConversation(userId) {
            currentConversationId = userId;

            // Update UI to show selected conversation
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.classList.remove('bg-indigo-50', 'border-l-4', 'border-indigo-500');
            });

            const selectedItem = document.querySelector(`[data-user-id="${userId}"]`);
            if (selectedItem) {
                selectedItem.classList.add('bg-indigo-50', 'border-l-4', 'border-indigo-500');
            }

            // Load conversation in the message area
            fetch(`/Messaging/Conversation/${userId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('messageArea').innerHTML = html;
                })
                .catch(error => {
                    console.error('Error loading conversation:', error);
                });
        }

        function searchMessages(query) {
            fetch(`/Messaging/SearchMessages?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displaySearchResults(data.results);
                    }
                })
                .catch(error => {
                    console.error('Error searching messages:', error);
                });
        }

        function displaySearchResults(results) {
            const searchResults = document.getElementById('searchResults');

            if (results.length === 0) {
                searchResults.innerHTML = '<p class="text-gray-500 text-center py-4">No messages found</p>';
            } else {
                const resultsHtml = results.map(result => `
                    <div class="p-4 border-b border-gray-200 hover:bg-gray-50 cursor-pointer"
                         onclick="openConversationFromSearch(${result.otherUserId})">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-sm font-medium text-gray-900">${result.senderName} → ${result.receiverName}</p>
                                <p class="text-sm text-gray-700 mt-1">${result.content}</p>
                            </div>
                            <span class="text-xs text-gray-500">${result.sentAt}</span>
                        </div>
                    </div>
                `).join('');

                searchResults.innerHTML = resultsHtml;
            }

            document.getElementById('searchModal').classList.remove('hidden');
        }

        function openConversationFromSearch(userId) {
            closeSearchModal();
            loadConversation(userId);
        }

        function closeSearchModal() {
            document.getElementById('searchModal').classList.add('hidden');
        }

        function startMessagePolling() {
            // Check for new messages every 10 seconds
            messageCheckInterval = setInterval(function() {
                checkForNewMessages();
            }, 10000);
        }

        function checkForNewMessages() {
            fetch('/Messaging/GetUnreadCount')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateUnreadCount(data.count);
                    }
                })
                .catch(error => {
                    console.error('Error checking for new messages:', error);
                });
        }

        function updateUnreadCount(count) {
            // Update the unread count in the navigation
            const unreadBadge = document.querySelector('.nav-unread-count');
            if (unreadBadge) {
                if (count > 0) {
                    unreadBadge.textContent = count;
                    unreadBadge.classList.remove('hidden');
                } else {
                    unreadBadge.classList.add('hidden');
                }
            }
        }

        function debounce(func, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(this, args), delay);
            };
        }

        // Close search modal when clicking outside
        document.getElementById('searchModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeSearchModal();
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (messageCheckInterval) {
                clearInterval(messageCheckInterval);
            }
        });
    </script>
}