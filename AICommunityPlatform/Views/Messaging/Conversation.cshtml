@model AICommunityPlatform.ViewModels.ConversationDetailViewModel
@{
    ViewData["Title"] = $"Chat with {Model.OtherUser.DisplayName}";
}

<div class="flex flex-col h-full min-h-[600px]">
    <!-- Chat Header -->
    <div class="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
        <div class="flex items-center">
            @if (!string.IsNullOrEmpty(Model.OtherUser.ProfilePicture))
            {
                    <img class="w-10 h-10 rounded-full object-cover mr-3" src="@Model.OtherUser.ProfilePicture" alt="@Model.OtherUser.DisplayName">
            }
            else
            {
                    <div class="w-10 h-10 bg-indigo-100 rounded-full flex items-center justify-center mr-3">
                        <span class="text-indigo-600 font-semibold text-sm">
                        @Model.OtherUser.FirstName.Substring(0, 1)@Model.OtherUser.LastName.Substring(0, 1)
                        </span>
                    </div>
            }
            <div>
                <h3 class="text-lg font-medium text-gray-900">@Model.OtherUser.DisplayName</h3>
                <p class="text-sm text-gray-500">@Model.OtherUser.Role</p>
            </div>
        </div>

        <div class="flex items-center space-x-2">
            <button onclick="viewProfile(@Model.OtherUser.Id)" class="text-gray-400 hover:text-indigo-600 transition-colors" title="View Profile">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
            </button>
            <button onclick="deleteConversation(@Model.OtherUser.Id)" class="text-gray-400 hover:text-red-600 transition-colors" title="Delete Conversation">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    </div>

    <!-- Messages Container -->
    <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50" style="height: 400px;">
        @foreach (var message in Model.Messages)
        {
            @if (message.SenderId == Model.CurrentUserId)
            {
                        <!-- Sent Message (Right Side) -->
                        <div class="flex justify-end">
                            <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-indigo-600 text-white shadow-sm">
                                <p class="text-sm break-words">@message.Content</p>
                                <p class="text-xs text-indigo-200 mt-1 text-right">@message.SentAt.ToString("HH:mm")</p>
                            </div>
                        </div>
            }
            else
            {
                        <!-- Received Message (Left Side) -->
                        <div class="flex justify-start">
                            <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm">
                                <p class="text-sm text-gray-900 break-words">@message.Content</p>
                                <p class="text-xs text-gray-500 mt-1">@message.SentAt.ToString("HH:mm")</p>
                            </div>
                        </div>
            }
        }

        @if (!Model.Messages.Any())
        {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Start the conversation</h3>
                    <p class="text-gray-600">Send a message to begin your conversation with @Model.OtherUser.DisplayName.</p>
                </div>
        }
    </div>

    <!-- Message Input Area -->
    <div class="p-4 border-t border-gray-200 bg-white">
        <form id="messageForm" class="flex items-end space-x-2">
            @Html.AntiForgeryToken()
            <div class="flex-1 relative">
                <textarea id="messageInput" rows="1" 
                          class="block w-full px-3 py-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 max-h-24"
                          placeholder="Type your message..."
                          onkeydown="handleKeyDown(event)"></textarea>
            </div>

            <div class="flex items-center space-x-2">
                <!-- Emoji Button -->
                <button type="button" onclick="toggleEmojiPicker()" class="text-gray-400 hover:text-indigo-600 transition-colors p-2 rounded-md">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </button>

                <!-- Send Button -->
                <button type="submit" id="sendButton" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                    <span class="ml-1 hidden sm:inline">Send</span>
                </button>
            </div>
        </form>

        <!-- Emoji Picker -->
        <div id="emojiPicker" class="hidden absolute bottom-20 right-4 bg-white border border-gray-200 rounded-lg shadow-lg p-3 z-20 max-w-xs">
            <div class="grid grid-cols-8 gap-2">
                <button type="button" onclick="addEmoji('😀')" class="p-2 hover:bg-gray-100 rounded text-lg">😀</button>
                <button type="button" onclick="addEmoji('😂')" class="p-2 hover:bg-gray-100 rounded text-lg">😂</button>
                <button type="button" onclick="addEmoji('😍')" class="p-2 hover:bg-gray-100 rounded text-lg">😍</button>
                <button type="button" onclick="addEmoji('🤔')" class="p-2 hover:bg-gray-100 rounded text-lg">🤔</button>
                <button type="button" onclick="addEmoji('👍')" class="p-2 hover:bg-gray-100 rounded text-lg">👍</button>
                <button type="button" onclick="addEmoji('👎')" class="p-2 hover:bg-gray-100 rounded text-lg">👎</button>
                <button type="button" onclick="addEmoji('❤️')" class="p-2 hover:bg-gray-100 rounded text-lg">❤️</button>
                <button type="button" onclick="addEmoji('🎉')" class="p-2 hover:bg-gray-100 rounded text-lg">🎉</button>
                <button type="button" onclick="addEmoji('💡')" class="p-2 hover:bg-gray-100 rounded text-lg">💡</button>
                <button type="button" onclick="addEmoji('🚀')" class="p-2 hover:bg-gray-100 rounded text-lg">🚀</button>
                <button type="button" onclick="addEmoji('💼')" class="p-2 hover:bg-gray-100 rounded text-lg">💼</button>
                <button type="button" onclick="addEmoji('🤝')" class="p-2 hover:bg-gray-100 rounded text-lg">🤝</button>
                <button type="button" onclick="addEmoji('📧')" class="p-2 hover:bg-gray-100 rounded text-lg">📧</button>
                <button type="button" onclick="addEmoji('⭐')" class="p-2 hover:bg-gray-100 rounded text-lg">⭐</button>
                <button type="button" onclick="addEmoji('✅')" class="p-2 hover:bg-gray-100 rounded text-lg">✅</button>
                <button type="button" onclick="addEmoji('❌')" class="p-2 hover:bg-gray-100 rounded text-lg">❌</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let lastMessageId = @(Model.Messages.Any() ? Model.Messages.Last().Id : 0);
        let newMessageInterval = null;
        let isPolling = false;

        document.addEventListener('DOMContentLoaded', function() {
            // Auto-scroll to bottom on load
            scrollToBottom();

            // Start polling for new messages
            startNewMessagePolling();

            // Handle form submission
            document.getElementById('messageForm').addEventListener('submit', function(e) {
                e.preventDefault();
                sendMessage();
            });

            // Auto-resize textarea
            const messageInput = document.getElementById('messageInput');
            messageInput.addEventListener('input', autoResize);

            // Focus on input
            messageInput.focus();
        });

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const content = messageInput.value.trim();

            if (!content) {
                messageInput.focus();
                return;
            }

            const sendButton = document.getElementById('sendButton');
            const originalContent = sendButton.innerHTML;

            // Show loading state
            sendButton.innerHTML = '<svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg><span class="ml-1 hidden sm:inline">Sending...</span>';
            sendButton.disabled = true;

            const formData = new FormData();
            formData.append('receiverId', '@Model.OtherUser.Id');
            formData.append('content', content);

            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            formData.append('__RequestVerificationToken', token);

            fetch('/Messaging/SendMessage', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Add message to UI immediately
                    addMessageToUI(data.message, true);
                    messageInput.value = '';
                    autoResize.call(messageInput);
                    scrollToBottom();
                    lastMessageId = data.message.id;
                    showToast('Message sent!', 'success');
                } else {
                    showToast(data.message || 'Error sending message', 'error');
                }
            })
            .catch(error => {
                console.error('Error sending message:', error);
                showToast('Error sending message. Please try again.', 'error');
            })
            .finally(() => {
                sendButton.innerHTML = originalContent;
                sendButton.disabled = false;
                messageInput.focus();
            });
        }

        function addMessageToUI(message, isFromCurrentUser) {
            const messagesContainer = document.getElementById('messagesContainer');
            const messageDiv = document.createElement('div');

            if (isFromCurrentUser) {
                messageDiv.className = 'flex justify-end';
                messageDiv.innerHTML = `
                    <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-indigo-600 text-white shadow-sm animate-slide-in-right">
                        <p class="text-sm break-words">${escapeHtml(message.content)}</p>
                        <p class="text-xs text-indigo-200 mt-1 text-right">${message.sentAt}</p>
                    </div>
                `;
            } else {
                messageDiv.className = 'flex justify-start';
                messageDiv.innerHTML = `
                    <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm animate-slide-in-left">
                        <p class="text-sm text-gray-900 break-words">${escapeHtml(message.content)}</p>
                        <p class="text-xs text-gray-500 mt-1">${message.sentAt}</p>
                    </div>
                `;
            }

            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        function startNewMessagePolling() {
            if (isPolling) return;

            isPolling = true;
            newMessageInterval = setInterval(function() {
                checkForNewMessages();
            }, 3000); // Check every 3 seconds
        }

        function checkForNewMessages() {
            fetch(`/Messaging/GetNewMessages?lastMessageId=${lastMessageId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.messages && data.messages.length > 0) {
                        data.messages.forEach(message => {
                            if (message.senderId === @Model.OtherUser.Id) {
                                addMessageToUI(message, false);
                                lastMessageId = Math.max(lastMessageId, message.id);

                                // Play notification sound (optional)
                                playNotificationSound();
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Error checking for new messages:', error);
                });
        }

        function handleKeyDown(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        function autoResize() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 96) + 'px'; // max-height: 96px (6rem)
        }

        function scrollToBottom() {
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }

        function toggleEmojiPicker() {
            const picker = document.getElementById('emojiPicker');
            picker.classList.toggle('hidden');
        }

        function addEmoji(emoji) {
            const messageInput = document.getElementById('messageInput');
            const cursorPos = messageInput.selectionStart;
            const textBefore = messageInput.value.substring(0, cursorPos);
            const textAfter = messageInput.value.substring(cursorPos);

            messageInput.value = textBefore + emoji + textAfter;
            messageInput.focus();
            messageInput.setSelectionRange(cursorPos + emoji.length, cursorPos + emoji.length);

            // Close emoji picker
            document.getElementById('emojiPicker').classList.add('hidden');

            // Trigger resize
            autoResize.call(messageInput);
        }

        function viewProfile(userId) {
            window.open(`/Profile/View/${userId}`, '_blank');
        }

        function deleteConversation(userId) {
            if (confirm('Are you sure you want to delete this conversation? This action cannot be undone.')) {
                showToast('Conversation deletion will be implemented soon', 'info');
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showToast(message, type) {
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${colors[type]} shadow-lg animate-slide-in-right`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('animate-fade-out');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function playNotificationSound() {
            // Create a subtle notification sound
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.frequency.value = 800;
            oscillator.type = 'sine';

            gainNode.gain.setValueAtTime(0, audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.1);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.5);
        }

        // Close emoji picker when clicking outside
        document.addEventListener('click', function(e) {
            const picker = document.getElementById('emojiPicker');
            const emojiButton = e.target.closest('button[onclick="toggleEmojiPicker()"]');

            if (!picker.contains(e.target) && !emojiButton) {
                picker.classList.add('hidden');
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            isPolling = false;
            if (newMessageInterval) {
                clearInterval(newMessageInterval);
            }
        });

        // Handle page visibility change (pause polling when tab not active)
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                if (newMessageInterval) {
                    clearInterval(newMessageInterval);
                    isPolling = false;
                }
            } else {
                if (!isPolling) {
                    startNewMessagePolling();
                }
            }
        });
    </script>

    <style>
        @@keyframes slide-in-right {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @@keyframes slide-in-left {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @@keyframes fade-out {
            from { opacity: 1; }
            to { opacity: 0; }
        }

        .animate-slide-in-right {
            animation: slide-in-right 0.3s ease-out;
        }

        .animate-slide-in-left {
            animation: slide-in-left 0.3s ease-out;
        }

        .animate-fade-out {
            animation: fade-out 0.3s ease-out;
        }

        /* Custom scrollbar for messages container */
        #messagesContainer::-webkit-scrollbar {
            width: 6px;
        }

        #messagesContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #messagesContainer::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        #messagesContainer::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
}