@model AICommunityPlatform.ViewModels.PublicProfileViewModel
@{
    ViewData["Title"] = Model.User.DisplayName + "'s Profile";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Profile Header -->
    <div class="bg-white shadow-sm">
        <div class="relative h-48 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
            <!-- Background Pattern -->
            <div class="absolute inset-0 bg-black opacity-10"></div>
            <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
        </div>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="relative -mt-24 pb-8">
                <div class="sm:flex sm:items-end sm:space-x-5">
                    <!-- Profile Picture -->
                    <div class="flex">
                        @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
                        {
                            <img class="h-32 w-32 rounded-full object-cover ring-4 ring-white shadow-lg"
                                 src="@Model.User.ProfilePicture" alt="@Model.User.DisplayName">
                        }
                        else
                        {
                            <div class="h-32 w-32 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center ring-4 ring-white shadow-lg">
                                <span class="text-4xl font-bold text-white">
                                    @Model.User.FirstName.Substring(0, 1)@Model.User.LastName.Substring(0, 1)
                                </span>
                            </div>
                        }
                    </div>

                    <!-- Profile Info -->
                    <div class="mt-6 sm:flex-1 sm:min-w-0 sm:flex sm:items-center sm:justify-end sm:space-x-6 sm:pb-1">
                        <div class="sm:hidden md:block mt-6 min-w-0 flex-1">
                            <h1 class="text-3xl font-bold text-gray-900 truncate">@Model.User.DisplayName</h1>
                            <div class="mt-2 flex items-center text-sm text-gray-500 space-x-4">
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v6.5A1.5 1.5 0 0116.5 17h-13A1.5 1.5 0 012 15.5V8a2 2 0 012-2h2zm1 0h6V5a2 2 0 00-2-2H9a2 2 0 00-2 2v1z" clip-rule="evenodd"></path>
                                    </svg>
                                    @Model.User.Role.ToString().Replace("CommunityMember", "Community Member")
                                </div>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                    </svg>
                                    Joined @Model.User.CreatedAt.ToString("MMMM yyyy")
                                </div>
                                @if (Model.User.IsEmailVerified)
                                {
                                    <div class="flex items-center">
                                        <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                        </svg>
                                        Verified
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="mt-6 flex flex-col justify-stretch space-y-3 sm:flex-row sm:space-y-0 sm:space-x-4">
                            @if (Model.IsOwnProfile)
                            {
                                <a asp-action="Edit" class="inline-flex justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="-ml-1 mr-2 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                    </svg>
                                    Edit Profile
                                </a>
                                <button type="button" onclick="document.getElementById('profilePictureInput').click()" class="inline-flex justify-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                    </svg>
                                    Upload Photo
                                </button>
                                <input type="file" id="profilePictureInput" accept="image/*" style="display: none;" onchange="uploadProfilePicture(this)">
                            }
                            else
                            {

                                <button onclick="sendMessage(@Model.User.Id)" class="inline-flex justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="-ml-1 mr-2 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                                    </svg>
                                    Message
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Mobile Profile Info -->
                <div class="hidden sm:block md:hidden mt-6 min-w-0 flex-1">
                    <h1 class="text-2xl font-bold text-gray-900 truncate">@Model.User.DisplayName</h1>
                </div>
            </div>
        </div>
    </div>

    <!-- Profile Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="lg:grid lg:grid-cols-3 lg:gap-8">
            <!-- Left Sidebar -->
            <div class="lg:col-span-1">
                <!-- About Section -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">About</h3>

                    @if (!string.IsNullOrEmpty(Model.User.Bio))
                    {
                        <p class="text-gray-700 text-sm leading-relaxed mb-4">@Model.User.Bio</p>
                    }
                    else if (Model.IsOwnProfile)
                    {
                        <p class="text-gray-500 text-sm italic mb-4">Add a bio to tell others about yourself.</p>
                    }
                    else
                    {
                        <p class="text-gray-500 text-sm italic mb-4">No bio available.</p>
                    }

                    <!-- Contact Info -->
                    @if (!string.IsNullOrEmpty(Model.User.Phone) && (Model.IsOwnProfile))
                    {
                        <div class="border-t pt-4">
                            <h4 class="text-sm font-medium text-gray-900 mb-2">Contact Information</h4>
                            <div class="flex items-center text-sm text-gray-600">
                                <svg class="flex-shrink-0 mr-2 h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                                </svg>
                                @Model.User.Phone
                            </div>
                        </div>
                    }

                    <!-- Profile Stats -->
                    <div class="border-t pt-4 mt-4">
                        <div class="grid grid-cols-3 gap-4 text-center">
                            <div>
                                <div class="text-xl font-bold text-gray-900">@Model.RecentPosts.Count</div>
                                <div class="text-xs text-gray-500">Posts</div>
                            </div>
                            <div>
                                <div class="text-xl font-bold text-gray-900">@Model.User.Documents.Count</div>
                                <div class="text-xs text-gray-500">Documents</div>
                            </div>
                            <div>
                                <div class="text-xl font-bold text-gray-900">
                                    @(Model.User.CreatedAt < DateTime.Now.AddYears(-1) ? "1+" : "New")
                                </div>
                                <div class="text-xs text-gray-500">Years</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Skills Section -->
                @if (!string.IsNullOrEmpty(Model.User.Skills))
                {
                    <div class="bg-white shadow rounded-lg p-6 mb-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Skills & Expertise</h3>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var skill in Model.User.Skills.Split(','))
                            {
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                                    @skill.Trim()
                                </span>
                            }
                        </div>
                    </div>
                }

                <!-- Experience Section -->
                @if (!string.IsNullOrEmpty(Model.User.Experience))
                {
                    <div class="bg-white shadow rounded-lg p-6 mb-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Experience</h3>
                        <p class="text-gray-700 text-sm leading-relaxed whitespace-pre-line">@Model.User.Experience</p>
                    </div>
                }

                <!-- Documents Section (Own Profile or Connected) -->
                @if (Model.User.Documents.Any() && (Model.IsOwnProfile ))
                {
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Documents</h3>
                        <div class="space-y-3">
                            @foreach (var document in Model.User.Documents.Take(5))
                            {
                                <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                                    <div class="flex items-center space-x-3">
                                        <div class="flex-shrink-0">
                                            <svg class="h-6 w-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
                                            </svg>
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <p class="text-sm font-medium text-gray-900 truncate">@document.FileName</p>
                                            <p class="text-sm text-gray-500">@document.Type • @document.UploadedAt.ToString("MMM dd, yyyy")</p>
                                        </div>
                                    </div>
                                    @if (Model.IsOwnProfile)
                                    {
                                        <a href="@document.FilePath" target="_blank" class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                                            View
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Main Content -->
            <div class="mt-6 lg:mt-0 lg:col-span-2">
                <!-- Recent Posts -->
                <div class="bg-white shadow rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Recent Posts</h3>
                    </div>

                    @if (Model.RecentPosts.Any())
                    {
                        <div class="divide-y divide-gray-200">
                            @foreach (var post in Model.RecentPosts)
                            {
                                <div class="px-6 py-6">
                                    <div class="flex space-x-3">
                                        <div class="flex-shrink-0">
                                            @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
                                            {
                                                <img class="h-10 w-10 rounded-full object-cover" src="@Model.User.ProfilePicture" alt="@Model.User.DisplayName">
                                            }
                                            else
                                            {
                                                <div class="h-10 w-10 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center">
                                                    <span class="text-sm font-medium text-white">
                                                        @Model.User.FirstName.Substring(0, 1)@Model.User.LastName.Substring(0, 1)
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <div class="flex items-center justify-between">
                                                <div>
                                                    <p class="text-sm font-medium text-gray-900">@Model.User.DisplayName</p>
                                                    <p class="text-sm text-gray-500">@post.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</p>
                                                </div>
                                                @if (post.IsPublic)
                                                {
                                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                        Public
                                                    </span>
                                                }
                                            </div>
                                            <div class="mt-3">
                                                <p class="text-gray-900 whitespace-pre-line">@post.Content</p>
                                            </div>
                                            <div class="mt-4 flex items-center space-x-6">
                                                <button class="flex items-center text-gray-500 hover:text-red-500 transition-colors">
                                                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span class="text-sm">@post.Likes.Count</span>
                                                </button>
                                                <button class="flex items-center text-gray-500 hover:text-blue-500 transition-colors">
                                                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span class="text-sm">@post.Comments.Count</span>
                                                </button>
                                                <button class="flex items-center text-gray-500 hover:text-gray-700 transition-colors">
                                                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                        <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z"></path>
                                                    </svg>
                                                    <span class="text-sm">Share</span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- View All Posts Link -->
                        <div class="px-6 py-4 border-t border-gray-200 text-center">
                            <a href="#" class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                                View all posts from @Model.User.FirstName
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="px-6 py-12 text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No posts yet</h3>
                            <p class="mt-1 text-sm text-gray-500">
                                @if (Model.IsOwnProfile)
                                {
                                    <span>Share your first post to get started!</span>
                                }
                                else
                                {
                                    <span>@Model.User.FirstName hasn't shared any public posts yet.</span>
                                }
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for anti-forgery token -->
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50"></div>

@section Scripts {
    <script>
        // Get anti-forgery token
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Upload profile picture (for own profile)
        function uploadProfilePicture(input) {
            if (input.files && input.files[0]) {
                const file = input.files[0];

                // Validate file size (5MB)
                if (file.size > 5 * 1024 * 1024) {
                    showToast('File size must be less than 5MB', 'error');
                    return;
                }

                // Validate file type
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
                if (!allowedTypes.includes(file.type.toLowerCase())) {
                    showToast('Only JPEG, PNG, and GIF files are allowed', 'error');
                    return;
                }

                const formData = new FormData();
                formData.append('profilePicture', file);
                formData.append('__RequestVerificationToken', getAntiForgeryToken());

                // Show loading toast
                showToast('Uploading profile picture...', 'info');

                fetch('/Profile/UploadProfilePicture', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Profile picture updated successfully!', 'success');
                        // Update profile picture on page
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showToast(data.message || 'Failed to upload profile picture', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error uploading profile picture', 'error');
                });
            }
        }

        // Send connection request
        function sendConnectionRequest(userId, button) {
            if (!userId || userId <= 0) {
                showToast('Invalid user ID', 'error');
                return;
            }

            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Sending...';

            const formData = new FormData();
            formData.append('userId', userId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/SendConnectionRequest', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Connection request sent!', 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to send connection request', 'error');
                    button.disabled = false;
                    button.innerHTML = originalContent;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error sending connection request', 'error');
                button.disabled = false;
                button.innerHTML = originalContent;
            });
        }

        // Send message (placeholder)
        function sendMessage(userId) {
            showToast('Messaging feature coming soon!', 'info');
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now();

            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `mb-2 px-4 py-2 rounded-md text-white shadow-lg ${colors[type]} transform transition-all duration-300 ease-in-out`;
            toast.textContent = message;

            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.className = 'ml-2 text-white hover:text-gray-200';
            closeBtn.onclick = () => removeToast(toastId);
            toast.appendChild(closeBtn);

            toastContainer.appendChild(toast);

            setTimeout(() => removeToast(toastId), 5000);
        }

        function removeToast(toastId) {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.style.transform = 'translateX(100%)';
                toast.style.opacity = '0';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }
        }

        // Handle post interactions
        document.addEventListener('DOMContentLoaded', function() {
            // Add click handlers for post interactions
            document.querySelectorAll('.post-like-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    likePost(postId, this);
                });
            });

            document.querySelectorAll('.post-share-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    sharePost(postId);
                });
            });
        });

        // Like post function
        function likePost(postId, button) {
            const formData = new FormData();
            formData.append('postId', postId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/LikePost', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const countSpan = button.querySelector('span');
                    countSpan.textContent = data.likeCount;

                    if (data.liked) {
                        button.classList.add('text-red-500');
                        button.classList.remove('text-gray-500');
                    } else {
                        button.classList.add('text-gray-500');
                        button.classList.remove('text-red-500');
                    }
                } else {
                    showToast('Error liking post', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error liking post', 'error');
            });
        }

        // Share post function
        function sharePost(postId) {
            const formData = new FormData();
            formData.append('postId', postId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/SharePost', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.shareUrl) {
                    // Copy to clipboard
                    navigator.clipboard.writeText(data.shareUrl).then(() => {
                        showToast('Post link copied to clipboard!', 'success');
                    }).catch(() => {
                        showToast('Share URL: ' + data.shareUrl, 'info');
                    });
                } else {
                    showToast('Error sharing post', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error sharing post', 'error');
            });
        }

        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Add loading states for buttons
        document.querySelectorAll('button[onclick]').forEach(button => {
            const originalOnClick = button.onclick;
            button.onclick = function(e) {
                // Add loading state
                const originalText = this.innerHTML;
                this.style.pointerEvents = 'none';

                // Execute original click handler
                if (originalOnClick) {
                    originalOnClick.call(this, e);
                }

                // Reset after delay
                setTimeout(() => {
                    this.style.pointerEvents = 'auto';
                }, 2000);
            };
        });
    </script>
}

<style>
    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: .5;
    }

    }

    /* Smooth transitions */
    .transition-colors {
        transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
    }

    /* Custom scrollbar */
    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

    /* Profile picture hover effect */
    .profile-picture-container:hover .profile-picture-overlay {
        opacity: 1;
    }

    .profile-picture-overlay {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
</style>