@model AICommunityPlatform.ViewModels.ProfileViewModel
@{
    ViewData["Title"] = "My Profile";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">My Profile</h1>
                    <p class="text-gray-600">Manage your profile and view your activity</p>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="/Profile/Edit" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Edit Profile
                    </a>
                    <a href="/Document" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Manage Documents
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Profile Card -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="text-center">
                        <div class="relative inline-block">
                            @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
                            {
                                <img class="w-24 h-24 rounded-full mx-auto object-cover" src="@Model.User.ProfilePicture" alt="Profile Picture">
                            }
                            else
                            {
                                <div class="w-24 h-24 rounded-full mx-auto bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center">
                                    <span class="text-white text-2xl font-bold">
                                        @Model.User.FirstName.Substring(0, 1)@Model.User.LastName.Substring(0, 1)
                                    </span>
                                </div>
                            }
                            <button onclick="showProfilePictureModal()" class="absolute bottom-0 right-0 bg-indigo-600 hover:bg-indigo-700 text-white rounded-full p-2 shadow-lg">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                            </button>
                        </div>

                        <h2 class="text-xl font-bold text-gray-900 mt-4">@Model.User.DisplayName</h2>
                        <p class="text-gray-600">@Model.User.Role</p>

                        @if (!string.IsNullOrEmpty(Model.User.Bio))
                        {
                            <p class="text-gray-700 mt-4 text-sm">@Model.User.Bio</p>
                        }

                        <div class="mt-6 space-y-3">
                            <div class="flex items-center justify-center text-sm text-gray-600">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                @Model.User.Email
                            </div>

                            @if (!string.IsNullOrEmpty(Model.User.Phone))
                            {
                                <div class="flex items-center justify-center text-sm text-gray-600">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                    </svg>
                                    @Model.User.Phone
                                </div>
                            }

                            <div class="flex items-center justify-center text-sm text-gray-600">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                Joined @Model.User.CreatedAt.ToString("MMMM yyyy")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Skills -->
                @if (!string.IsNullOrEmpty(Model.User.Skills))
                {
                    <div class="bg-white rounded-lg shadow p-6 mt-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Skills</h3>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var skill in Model.User.Skills.Split(',').Select(s => s.Trim()))
                            {
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                                    @skill
                                </span>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Main Content -->
            <div class="lg:col-span-2">
                <!-- Stats Cards -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex items-center">
                            <div class="p-2 bg-blue-100 rounded-lg">
                                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-gray-600">Connections</p>
                                <p class="text-2xl font-bold text-gray-900">@Model.ConnectionsCount</p>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex items-center">
                            <div class="p-2 bg-green-100 rounded-lg">
                                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-gray-600">Applications</p>
                                <p class="text-2xl font-bold text-gray-900">@Model.ApplicationsCount</p>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex items-center">
                            <div class="p-2 bg-purple-100 rounded-lg">
                                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-gray-600">Documents</p>
                                <p class="text-2xl font-bold text-gray-900">@Model.DocumentsCount</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Applications -->
                <div class="bg-white rounded-lg shadow">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                            <h2 class="text-lg font-semibold text-gray-900">Recent Applications</h2>
                            <a href="/Jobs/MyApplications" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                                View All
                            </a>
                        </div>
                    </div>

                    <div class="divide-y divide-gray-200">
                        @foreach (var application in Model.RecentApplications)
                        {
                            <div class="p-6">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="text-sm font-medium text-gray-900">
                                            <a href="/Jobs/Details/@application.Job.Id" class="hover:text-indigo-600">
                                                @application.Job.Title
                                            </a>
                                        </h3>
                                        <p class="text-sm text-gray-600">@application.Job.Organization.DisplayName</p>
                                        <p class="text-xs text-gray-500 mt-1">
                                            Applied @application.AppliedDate.ToString("MMM dd, yyyy")
                                        </p>
                                    </div>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusClass(application.Status)">
                                        @application.Status.ToString()
                                    </span>
                                </div>
                            </div>
                        }

                        @if (!Model.RecentApplications.Any())
                        {
                            <div class="p-6 text-center">
                                <p class="text-gray-500 text-sm">No applications yet</p>
                                <a href="/Jobs" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                                    Browse Jobs
                                </a>
                            </div>
                        }
                    </div>
                </div>

                <!-- Experience Section -->
                @if (!string.IsNullOrEmpty(Model.User.Experience))
                {
                    <div class="bg-white rounded-lg shadow mt-6">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Experience</h2>
                        </div>
                        <div class="p-6">
                            <div class="prose max-w-none text-gray-700">
                                @Html.Raw(Model.User.Experience.Replace("\n", "<br/>"))
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Profile Picture Modal -->
<div id="profilePictureModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Update Profile Picture</h3>
            <form id="profilePictureForm" enctype="multipart/form-data">
                <div class="mb-4">
                    <input type="file" id="profilePictureInput" accept="image/*"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <p class="text-xs text-gray-500 mt-1">JPG, PNG, or GIF (Max 5MB)</p>
                </div>
                <div class="flex justify-end space-x-3">
                    @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
                    {
                        <button type="button" onclick="removeProfilePicture()" class="px-4 py-2 text-sm font-medium text-red-700 bg-red-100 border border-red-300 rounded-md hover:bg-red-200">
                            Remove Picture
                        </button>
                    }
                    <button type="button" onclick="closeProfilePictureModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">
                        Update Picture
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@functions {
    private string GetStatusClass(AICommunityPlatform.Models.ApplicationStatus status)
    {
        return status switch
        {
            AICommunityPlatform.Models.ApplicationStatus.Applied => "bg-yellow-100 text-yellow-800",
            AICommunityPlatform.Models.ApplicationStatus.Viewed => "bg-blue-100 text-blue-800",
            AICommunityPlatform.Models.ApplicationStatus.Interview => "bg-green-100 text-green-800",
            AICommunityPlatform.Models.ApplicationStatus.Accepted => "bg-purple-100 text-purple-800",
            AICommunityPlatform.Models.ApplicationStatus.Rejected => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}

@section Scripts {
    <script>
        function showProfilePictureModal() {
            document.getElementById('profilePictureModal').classList.remove('hidden');
        }

        function closeProfilePictureModal() {
            document.getElementById('profilePictureModal').classList.add('hidden');
        }

        // Handle profile picture upload
        document.getElementById('profilePictureForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const fileInput = document.getElementById('profilePictureInput');
            const file = fileInput.files[0];

            if (!file) {
                showToast('Please select a file', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('profilePicture', file);

            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.textContent = 'Uploading...';
            submitBtn.disabled = true;

            fetch('/Profile/UpdateProfilePicture', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    location.reload(); // Refresh to show new image
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error uploading image', 'error');
            })
            .finally(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
                closeProfilePictureModal();
            });
        });

        // Remove profile picture
        function removeProfilePicture() {
            if (confirm('Are you sure you want to remove your profile picture?')) {
                fetch('/Profile/RemoveProfilePicture', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        location.reload();
                    } else {
                        showToast(data.message, 'error');
                    }
                })
                .catch(error => {
                    showToast('Error removing picture', 'error');
                });
            }
        }

        // Close modal when clicking outside
        document.getElementById('profilePictureModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeProfilePictureModal();
            }
        });

        function showToast(message, type) {
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${colors[type]}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    </script>
}