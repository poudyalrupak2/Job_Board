@model AICommunityPlatform.ViewModels.ConnectionsViewModel
@{
    ViewData["Title"] = "My Connections";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">My Connections</h1>
                    <p class="text-gray-600">Manage your professional network</p>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="/Community/Members" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Find Members
                    </a>
                    <a href="/Community" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                        </svg>
                        Community Feed
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-2 bg-green-100 rounded-lg">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Total Connections</p>
                        <p class="text-2xl font-bold text-gray-900">@Model.Connections.Count</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-2 bg-yellow-100 rounded-lg">
                        <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Pending Requests</p>
                        <p class="text-2xl font-bold text-gray-900">@Model.PendingRequests.Count</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pending Requests -->
        @if (Model.PendingRequests.Any())
        {
            <div class="bg-white rounded-lg shadow mb-8">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Pending Connection Requests</h2>
                </div>
                <div class="divide-y divide-gray-200">
                    @foreach (var request in Model.PendingRequests)
                    {
                        <div class="p-6">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    @if (!string.IsNullOrEmpty(request.Sender.ProfilePicture))
                                    {
                                        <img class="w-12 h-12 rounded-full object-cover mr-4" src="@request.Sender.ProfilePicture" alt="@request.Sender.DisplayName">
                                    }
                                    else
                                    {
                                        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mr-4">
                                            <span class="text-indigo-600 font-semibold">
                                                @request.Sender.FirstName.Substring(0, 1)@request.Sender.LastName.Substring(0, 1)
                                            </span>
                                        </div>
                                    }
                                    
                                    <div>
                                        <h3 class="text-lg font-medium text-gray-900">@request.Sender.DisplayName</h3>
                                        <p class="text-sm text-gray-600">@request.Sender.Role</p>
                                        @if (!string.IsNullOrEmpty(request.Sender.Bio))
                                        {
                                            <p class="text-sm text-gray-500 mt-1">
                                                @(request.Sender.Bio.Length > 100 ? request.Sender.Bio.Substring(0, 100) + "..." : request.Sender.Bio)
                                            </p>
                                        }
                                        <p class="text-xs text-gray-400 mt-1">Sent @request.RequestDate.ToString("MMM dd, yyyy")</p>
                                    </div>
                                </div>
                                
                                <div class="flex space-x-3">
                                    <button onclick="acceptConnection(@request.Id)" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                        Accept
                                    </button>
                                    <button onclick="rejectConnection(@request.Id)" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md text-sm font-medium">
                                        Decline
                                    </button>
                                    <a href="/Profile/View/@request.Sender.Id" class="text-indigo-600 hover:text-indigo-800 px-4 py-2 text-sm font-medium">
                                        View Profile
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Connections List -->
        <div class="bg-white rounded-lg shadow">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Your Connections</h2>
            </div>
            
           @if (Model.Connections.Any())
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
        @foreach (var connection in Model.Connections)
        {
          
                var otherUser = connection.SenderId == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0") 
                              ? connection.Receiver 
                              : connection.Sender;
            
            
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                <div class="flex items-center justify-between mb-3">
                    @if (!string.IsNullOrEmpty(otherUser.ProfilePicture))
                    {
                        <img class="w-12 h-12 rounded-full object-cover" src="@otherUser.ProfilePicture" alt="@otherUser.DisplayName">
                    }
                    else
                    {
                        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center">
                            <span class="text-indigo-600 font-semibold">
                                @otherUser.FirstName.Substring(0, 1)@otherUser.LastName.Substring(0, 1)
                            </span>
                        </div>
                    }
                    
                    <div class="flex space-x-2">
                        <button onclick="sendMessage(@otherUser.Id)" class="text-gray-400 hover:text-indigo-600 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="font-medium text-gray-900">@otherUser.DisplayName</h3>
                    <p class="text-sm text-gray-600">@otherUser.Role</p>
                    
                    @if (!string.IsNullOrEmpty(otherUser.Skills))
                    {
                        <div class="mt-2">
                            <div class="flex flex-wrap gap-1">
                                @foreach (var skill in otherUser.Skills.Split(',').Take(3))
                                {
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800">
                                        @skill.Trim()
                                    </span>
                                }
                                @if (otherUser.Skills.Split(',').Length > 3)
                                {
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                        +@(otherUser.Skills.Split(',').Length - 3)
                                    </span>
                                }
                            </div>
                        </div>
                    }
                    
                    <div class="mt-3 flex items-center justify-between">
                        <span class="text-xs text-gray-500">
                            Connected @connection.AcceptedDate?.ToString("MMM dd, yyyy")
                        </span>
                        <a href="/Profile/View/@otherUser.Id" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                            View Profile
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}
            else
            {
                <div class="p-12 text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No connections yet</h3>
                    <p class="text-gray-600 mb-4">Start building your professional network by connecting with other AI professionals.</p>
                    <a href="/Community/Members" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                        Find Members to Connect
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function acceptConnection(connectionId) {
            fetch('/Community/AcceptConnection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `connectionId=${connectionId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    // Remove the request from the pending list
                    event.target.closest('.p-6').remove();
                    // Refresh page to update counts
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error accepting connection', 'error');
            });
        }
        
        function rejectConnection(connectionId) {
            if (confirm('Are you sure you want to decline this connection request?')) {
                fetch('/Community/RejectConnection', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `connectionId=${connectionId}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        // Remove the request from the pending list
                        event.target.closest('.p-6').remove();
                        // Update pending count
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(data.message, 'error');
                    }
                })
                .catch(error => {
                    showToast('Error rejecting connection', 'error');
                });
            }
        }
        
        function sendMessage(userId) {
            window.location.href = `/Messaging?userId=${userId}`;
        }
        
        function showToast(message, type) {
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };
            
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${colors[type]}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    </script>
}