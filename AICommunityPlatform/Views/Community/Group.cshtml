@model AICommunityPlatform.Models.Group
@{
    ViewData["Title"] = Model.Name;
    Layout = "_Layout";
    var currentUserId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
    var userMembership = ViewBag.UserMembership as AICommunityPlatform.Models.GroupMember;
    var isMember = ViewBag.IsMember as bool? ?? false;
    var isPending = ViewBag.IsPending as bool? ?? false;
    var isModerator = ViewBag.IsModerator as bool? ?? false;
}

<div class="container-fluid py-4">
    <!-- Group Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <div class="d-flex align-items-center mb-3">
                                <h1 class="h3 mb-0 me-3">@Model.Name</h1>
                                @if (Model.IsPrivate)
                                {
                                    <span class="badge bg-warning text-dark">
                                        <i class="fas fa-lock me-1"></i>Private Group
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-globe me-1"></i>Public Group
                                    </span>
                                }
                            </div>

                            <p class="text-muted mb-3">@Model.Description</p>

                            <div class="row text-muted small">
                                <div class="col-md-4">
                                    <i class="fas fa-user me-1"></i>
                                    Moderator: <strong>@Model.Moderator.DisplayName</strong>
                                </div>
                                <div class="col-md-4">
                                    <i class="fas fa-users me-1"></i>
                                    <strong>@Model.Members.Count(m => m.IsApproved)</strong> members
                                </div>
                                <div class="col-md-4">
                                    <i class="fas fa-calendar me-1"></i>
                                    Created @Model.CreatedAt.ToString("MMM dd, yyyy")
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4 text-end">
                            @if (isModerator)
                            {
                                <button type="button" class="btn btn-info me-2" data-bs-toggle="modal" data-bs-target="#manageGroupModal">
                                    <i class="fas fa-cog me-1"></i>Manage Group
                                </button>
                            }

                            @if (isMember)
                            {
                                <button type="button" class="btn btn-outline-danger" onclick="leaveGroup(@Model.Id, this)">
                                    <i class="fas fa-sign-out-alt me-1"></i>Leave Group
                                </button>
                            }
                            else if (isPending)
                            {
                                <button type="button" class="btn btn-warning" disabled>
                                    <i class="fas fa-clock me-1"></i>Pending Approval
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary" onclick="joinGroup(@Model.Id, this)">
                                    <i class="fas fa-plus me-1"></i>Join Group
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Create Post Section (only for members) -->
            @if (isMember)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-edit me-2"></i>Share with the group</h5>
                    </div>
                    <div class="card-body">
                        <form id="createPostForm">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="groupId" value="@Model.Id" />
                            <div class="mb-3">
                                <textarea class="form-control" id="postContent" name="content" rows="3" placeholder="What's on your mind? Share with the group..." required></textarea>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Posts in groups are only visible to group members
                                </small>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-share me-1"></i>Post
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            }

            <!-- Group Posts -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-comments me-2"></i>Group Posts</h5>
                </div>
                <div class="card-body">
                    @if (Model.Posts != null && Model.Posts.Any())
                    {
                        @foreach (var post in Model.Posts.OrderByDescending(p => p.CreatedAt))
                        {
                            <div class="border-bottom pb-3 mb-3">
                                <div class="d-flex align-items-start">
                                    <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                                        <span class="text-white fw-bold">
                                            @(post.Author.FirstName.Substring(0, 1) + post.Author.LastName.Substring(0, 1))
                                        </span>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <div>
                                                <strong>@post.Author.DisplayName</strong>
                                                <small class="text-muted ms-2">@post.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                            </div>
                                        </div>
                                        <p class="mb-2">@post.Content</p>
                                        <div class="d-flex align-items-center text-muted small">
                                            <button class="btn btn-link btn-sm text-muted p-0 me-3" onclick="likePost(@post.Id, this)">
                                                <i class="fas fa-heart me-1"></i>
                                                <span>@post.Likes.Count</span>
                                            </button>
                                            <button class="btn btn-link btn-sm text-muted p-0" onclick="toggleComments(@post.Id)">
                                                <i class="fas fa-comment me-1"></i>
                                                <span>@post.Comments.Count</span>
                                            </button>
                                        </div>

                                        <!-- Comments Section -->
                                        <div id="comments-@post.Id" class="mt-3" style="display: none;">
                                            @foreach (var comment in post.Comments.OrderBy(c => c.CreatedAt))
                                            {
                                                <div class="d-flex align-items-start mt-2">
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 30px; height: 30px;">
                                                        <span class="text-white small">
                                                            @(comment.User.FirstName.Substring(0, 1) + comment.User.LastName.Substring(0, 1))
                                                        </span>
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <div class="bg-light rounded p-2">
                                                            <strong class="small">@comment.User.DisplayName</strong>
                                                            <p class="mb-0 small">@comment.Content</p>
                                                        </div>
                                                        <small class="text-muted">@comment.CreatedAt.ToString("MMM dd 'at' h:mm tt")</small>
                                                    </div>
                                                </div>
                                            }

                                            @if (isMember)
                                            {
                                                <div class="d-flex align-items-center mt-2">
                                                    <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 30px; height: 30px;">
                                                        <span class="text-white small">
                                                            @(User.FindFirst("FirstName")?.Value?.Substring(0, 1) ?? "")@(User.FindFirst("LastName")?.Value?.Substring(0, 1) ?? "")
                                                        </span>
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <div class="input-group input-group-sm">
                                                            <input type="text" class="form-control" placeholder="Write a comment..." id="comment-input-@post.Id">
                                                            <button class="btn btn-outline-primary btn-sm" onclick="addComment(@post.Id)">
                                                                <i class="fas fa-paper-plane"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-comments fa-3x text-muted mb-3"></i>
                            <h5>No posts yet</h5>
                            <p class="text-muted">
                                @if (isMember)
                                {
                                    <span>Be the first to share something with the group!</span>
                                }
                                else
                                {
                                    <span>Join the group to see and create posts.</span>
                                }
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Group Members -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-users me-2"></i>Members (@Model.Members.Count(m => m.IsApproved))</h5>
                </div>
                <div class="card-body">
                    @foreach (var member in Model.Members.Where(m => m.IsApproved).Take(10))
                    {
                        <div class="d-flex align-items-center mb-2">
                            <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                                <span class="text-white small">
                                    @(member.User.FirstName.Substring(0, 1) + member.User.LastName.Substring(0, 1))
                                </span>
                            </div>
                            <div>
                                <div class="fw-bold small">@member.User.DisplayName</div>
                                <small class="text-muted">Joined @member.JoinedAt.ToString("MMM yyyy")</small>
                            </div>
                            @if (member.User.Id == Model.ModeratorId)
                            {
                                <span class="badge bg-warning text-dark ms-auto">Moderator</span>
                            }
                        </div>
                    }

                    @if (Model.Members.Count(m => m.IsApproved) > 10)
                    {
                        <div class="text-center mt-3">
                            <small class="text-muted">and @(Model.Members.Count(m => m.IsApproved) - 10) more members</small>
                        </div>
                    }
                </div>
            </div>

            @if (isModerator && Model.Members.Any(m => !m.IsApproved))
            {
                <!-- Pending Requests (Moderator only) -->
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Pending Requests</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var pendingMember in Model.Members.Where(m => !m.IsApproved))
                        {
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                                        <span class="text-white small">
                                            @(pendingMember.User.FirstName.Substring(0, 1) + pendingMember.User.LastName.Substring(0, 1))
                                        </span>
                                    </div>
                                    <div>
                                        <div class="fw-bold small">@pendingMember.User.DisplayName</div>
                                        <small class="text-muted">@pendingMember.JoinedAt.ToString("MMM dd")</small>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btn-success btn-sm me-1" onclick="approveMember(@pendingMember.Id)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="rejectMember(@pendingMember.Id)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>

@section Scripts {
    <script>
        // Get anti-forgery token
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Join Group
        function joinGroup(groupId, button) {
            if (!groupId || groupId <= 0) {
                showToast('Invalid group ID', 'error');
                return;
            }

            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Joining...';

            const formData = new FormData();
            formData.append('groupId', groupId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/JoinGroup', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to join group', 'error');
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while joining the group', 'error');
                button.disabled = false;
                button.innerHTML = originalText;
            });
        }

        // Leave Group
        function leaveGroup(groupId, button) {
            if (!confirm('Are you sure you want to leave this group?')) {
                return;
            }

            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Leaving...';

            const formData = new FormData();
            formData.append('groupId', groupId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/LeaveGroup', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to leave group', 'error');
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while leaving the group', 'error');
                button.disabled = false;
                button.innerHTML = originalText;
            });
        }

        // Create Post
        document.addEventListener('DOMContentLoaded', function() {
            const createPostForm = document.getElementById('createPostForm');
            if (createPostForm) {
                createPostForm.addEventListener('submit', function(e) {
                    e.preventDefault();

                    const content = document.getElementById('postContent').value.trim();
                    if (!content) {
                        showToast('Please enter some content for your post', 'error');
                        return;
                    }

                    const formData = new FormData(this);
                    formData.append('isPublic', false); // Group posts are not public

                    fetch('/Community/CreatePost', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message, 'success');
                            document.getElementById('postContent').value = '';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast(data.message || 'Failed to create post', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while creating the post', 'error');
                    });
                });
            }
        });

        // Toggle Comments
        function toggleComments(postId) {
            const commentsDiv = document.getElementById(`comments-${postId}`);
            if (commentsDiv.style.display === 'none') {
                commentsDiv.style.display = 'block';
            } else {
                commentsDiv.style.display = 'none';
            }
        }

        // Add Comment
        function addComment(postId) {
            const input = document.getElementById(`comment-input-${postId}`);
            const content = input.value.trim();

            if (!content) {
                showToast('Please enter a comment', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('postId', postId);
            formData.append('content', content);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/CommentOnPost', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    input.value = '';
                    location.reload(); // Reload to show new comment
                } else {
                    showToast(data.message || 'Failed to add comment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while adding the comment', 'error');
            });
        }

        // Like Post
        function likePost(postId, button) {
            const formData = new FormData();
            formData.append('postId', postId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('/Community/LikePost', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const countSpan = button.querySelector('span');
                    countSpan.textContent = data.likeCount;

                    const icon = button.querySelector('i');
                    if (data.liked) {
                        icon.className = 'fas fa-heart me-1 text-danger';
                    } else {
                        icon.className = 'fas fa-heart me-1';
                    }
                }
            })
            .catch(error => console.error('Error:', error));
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now();

            const bgClass = type === 'error' ? 'bg-danger' : type === 'success' ? 'bg-success' : 'bg-info';

            const toastHtml = `
                <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);

            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, { delay: 4000 });
            toast.show();

            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }
    </script>
}