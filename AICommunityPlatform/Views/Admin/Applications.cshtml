@model AICommunityPlatform.ViewModels.AdminApplicationsViewModel
@{
    ViewData["Title"] = Model.JobId.HasValue ? $"Applications for {ViewBag.Job?.Title}" : "Manage Applications";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="mb-8">
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="flex items-center space-x-4">
                    <li>
                        <a asp-action="Index" class="text-gray-400 hover:text-gray-500">
                            <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L9 5.414V17a1 1 0 102 0V5.414l5.293 5.293a1 1 0 001.414-1.414l-7-7z"></path>
                            </svg>
                            Admin Dashboard
                        </a>
                    </li>
                    @if (Model.JobId.HasValue)
                    {
                        <li>
                            <div class="flex items-center">
                                <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                <a asp-action="Jobs" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">Jobs</a>
                            </div>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                <a asp-action="Details" asp-route-id="@Model.JobId" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">@ViewBag.Job?.Title</a>
                            </div>
                        </li>
                    }
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="ml-4 text-sm font-medium text-gray-500">Applications</span>
                        </div>
                    </li>
                </ol>
            </nav>

            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        @if (Model.JobId.HasValue)
                        {
                            <span>Applications for "@ViewBag.Job?.Title"</span>
                        }
                        else
                        {
                            <span>Manage Applications</span>
                        }
                    </h2>
                    <p class="text-gray-600 mt-1">
                        @Model.Applications.Count applications found
                    </p>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-3">
                    @if (Model.JobId.HasValue)
                    {
                        <a asp-action="ExportApplications" asp-route-jobId="@Model.JobId"
                           class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                            Export CSV
                        </a>
                    }
                    <a asp-action="Applications"
                       class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>
                        </svg>
                        Refresh
                    </a>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="bg-white shadow rounded-lg p-6 mb-6">
            <form method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4">
                @if (Model.JobId.HasValue)
                {
                    <input type="hidden" name="jobId" value="@Model.JobId" />
                }

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Filter by Status</label>
                    <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">All Statuses</option>
                        @foreach (ApplicationStatus status in Enum.GetValues<ApplicationStatus>())
                        {
                            <option value="@status" selected="@(Model.SelectedStatus == status)">@status</option>
                        }
                    </select>
                </div>

                <div class="flex items-end">
                    <button type="submit" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md font-medium">
                        Apply Filters
                    </button>
                </div>

                <div class="flex items-end">
                    <a asp-action="Applications" asp-route-jobId="@Model.JobId"
                       class="w-full text-center bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-md font-medium">
                        Clear Filters
                    </a>
                </div>

                @if (Model.JobId.HasValue)
                {
                    <div class="flex items-end">
                        <a asp-action="Applications"
                           class="w-full text-center bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium">
                            View All Applications
                        </a>
                    </div>
                }
            </form>
        </div>

        <!-- Applications List -->
        @if (Model.Applications.Any())
        {
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
                <ul class="divide-y divide-gray-200">
                    @foreach (var application in Model.Applications)
                    {
                        <li class="px-6 py-4 hover:bg-gray-50">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center flex-1">
                                    <!-- User Avatar -->
                                    <div class="flex-shrink-0 h-12 w-12">
                                        <div class="h-12 w-12 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center">
                                            <span class="text-lg font-medium text-white">
                                                @application.User.FirstName.Substring(0, 1)@application.User.LastName.Substring(0, 1)
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Application Details -->
                                    <div class="ml-4 flex-1">
                                        <div class="flex items-center justify-between">
                                            <div>
                                                <h3 class="text-lg font-medium text-gray-900">@application.User.DisplayName</h3>
                                                <p class="text-sm text-gray-600">
                                                    <svg class="w-4 h-4 mr-1 inline" fill="currentColor" viewBox="0 0 20 20">
                                                        <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                                                        <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                                                    </svg>
                                                    @application.User.Email
                                                </p>
                                                @if (!Model.JobId.HasValue)
                                                {
                                                    <p class="text-sm text-gray-500 mt-1">
                                                        <svg class="w-4 h-4 mr-1 inline" fill="currentColor" viewBox="0 0 20 20">
                                                            <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v6.5A1.5 1.5 0 0116.5 17h-13A1.5 1.5 0 012 15.5V8a2 2 0 012-2h2z" clip-rule="evenodd"></path>
                                                        </svg>
                                                        Applied for: <strong>@application.Job.Title</strong> at @application.Job.Organization.DisplayName
                                                    </p>
                                                }
                                            </div>
                                            <div class="text-right">
                                                <p class="text-sm text-gray-500">
                                                    <svg class="w-4 h-4 mr-1 inline" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    @application.AppliedDate.ToString("MMM dd, yyyy")
                                                </p>
                                                <p class="text-xs text-gray-400">@application.AppliedDate.ToString("h:mm tt")</p>
                                            </div>
                                        </div>

                                        <!-- Cover Letter Preview -->
                                        @if (!string.IsNullOrEmpty(application.CoverLetter))
                                        {
                                            <div class="mt-2">
                                                <p class="text-sm text-gray-700 italic">
                                                    "@(application.CoverLetter.Length > 120 ?
                                                       application.CoverLetter.Substring(0, 120) + "..." :
                                                       application.CoverLetter)"
                                                </p>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Status and Actions -->
                                <div class="flex items-center space-x-4 ml-4">
                                    <!-- Status Badge -->
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(application.Status)">
                                        @application.Status
                                    </span>

                                    <!-- Status Dropdown -->
                                    <div class="min-w-32">
                                        <select onchange="updateApplicationStatus(@application.Id, this.value, this)"
                                                class="text-sm border border-gray-300 rounded-md px-2 py-1 w-full focus:ring-indigo-500 focus:border-indigo-500">
                                            @foreach (ApplicationStatus status in Enum.GetValues<ApplicationStatus>())
                                            {
                                                <option value="@status" selected="@(application.Status == status)">@status</option>
                                            }
                                        </select>
                                    </div>

                                    <!-- Actions -->
                                    <div class="flex space-x-2">
                                        @if (!string.IsNullOrEmpty(application.Resume))
                                        {
                                            <a href="@Url.Action("DownloadResume", "Jobs", new { applicationId = application.Id })"
                                               class="text-indigo-600 hover:text-indigo-900 p-1 rounded-md hover:bg-indigo-50"
                                               title="Download Resume">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                </svg>
                                            </a>
                                        }

                                        <button onclick="viewApplicationDetails(@application.Id)"
                                                class="text-blue-600 hover:text-blue-900 p-1 rounded-md hover:bg-blue-50"
                                                title="View Details">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                            </svg>
                                        </button>

                                        <button onclick="deleteApplication(@application.Id)"
                                                class="text-red-600 hover:text-red-900 p-1 rounded-md hover:bg-red-50"
                                                title="Delete Application">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-6 rounded-b-lg">
                    <div class="flex-1 flex justify-between sm:hidden">
                        @if (Model.HasPreviousPage)
                        {
                            <a asp-action="Applications" asp-route-page="@(Model.CurrentPage - 1)" asp-route-status="@Model.SelectedStatus" asp-route-jobId="@Model.JobId"
                               class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Previous
                            </a>
                        }
                        @if (Model.HasNextPage)
                        {
                            <a asp-action="Applications" asp-route-page="@(Model.CurrentPage + 1)" asp-route-status="@Model.SelectedStatus" asp-route-jobId="@Model.JobId"
                               class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Next
                            </a>
                        }
                    </div>
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Showing page <span class="font-medium">@Model.CurrentPage</span> of <span class="font-medium">@Model.TotalPages</span>
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                                @if (Model.HasPreviousPage)
                                {
                                    <a asp-action="Applications" asp-route-page="@(Model.CurrentPage - 1)" asp-route-status="@Model.SelectedStatus" asp-route-jobId="@Model.JobId"
                                       class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        Previous
                                    </a>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <a asp-action="Applications" asp-route-page="@i" asp-route-status="@Model.SelectedStatus" asp-route-jobId="@Model.JobId"
                                       class="relative inline-flex items-center px-4 py-2 border text-sm font-medium @(i == Model.CurrentPage ? "bg-indigo-50 border-indigo-500 text-indigo-600" : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50")">
                                        @i
                                    </a>
                                }

                                @if (Model.HasNextPage)
                                {
                                    <a asp-action="Applications" asp-route-page="@(Model.CurrentPage + 1)" asp-route-status="@Model.SelectedStatus" asp-route-jobId="@Model.JobId"
                                       class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        Next
                                    </a>
                                }
                            </nav>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No applications found</h3>
                <p class="mt-1 text-sm text-gray-500">
                    @if (Model.JobId.HasValue)
                    {
                        <span>No applications have been submitted for this job yet.</span>
                    }
                    else
                    {
                        <span>No applications match your current filters.</span>
                    }
                </p>
                @if (Model.SelectedStatus.HasValue)
                {
                    <div class="mt-6">
                        <a asp-action="Applications" asp-route-jobId="@Model.JobId"
                           class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                            Clear Filters
                        </a>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50"></div>

@section Scripts {
    <script>
        function updateApplicationStatus(applicationId, newStatus, selectElement) {
            const originalValue = selectElement.value;

            fetch('/Admin/UpdateApplicationStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `applicationId=${applicationId}&newStatus=${newStatus}&__RequestVerificationToken=${getAntiForgeryToken()}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    // Update the status badge
                    const statusBadge = selectElement.closest('.flex').querySelector('.inline-flex.items-center');
                    if (statusBadge) {
                        statusBadge.textContent = newStatus;
                        statusBadge.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(newStatus)}`;
                    }
                } else {
                    showToast(data.message || 'Failed to update status', 'error');
                    // Revert the select to original value
                    selectElement.value = originalValue;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating application status', 'error');
                selectElement.value = originalValue;
            });
        }

        function viewApplicationDetails(applicationId) {
            window.location.href = `/Admin/ViewApplication/${applicationId}`;
        }

        function deleteApplication(applicationId) {
            if (!confirm('Are you sure you want to delete this application? This action cannot be undone.')) {
                return;
            }

            fetch('/Admin/DeleteApplication', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `applicationId=${applicationId}&__RequestVerificationToken=${getAntiForgeryToken()}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    // Remove the application row
                    const applicationRow = document.querySelector(`button[onclick="deleteApplication(${applicationId})"]`).closest('li');
                    if (applicationRow) {
                        applicationRow.remove();
                    }
                } else {
                    showToast(data.message || 'Failed to delete application', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error deleting application', 'error');
            });
        }

        function getStatusBadgeClass(status) {
            const statusClasses = {
                'Applied': 'bg-blue-100 text-blue-800',
                'UnderReview': 'bg-yellow-100 text-yellow-800',
                'Interviewed': 'bg-purple-100 text-purple-800',
                'Accepted': 'bg-green-100 text-green-800',
                'Rejected': 'bg-red-100 text-red-800'
            };
            return statusClasses[status] || 'bg-gray-100 text-gray-800';
        }

        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container');
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `mb-2 px-4 py-2 rounded-md text-white shadow-lg ${colors[type]} transform transition-all duration-300 ease-in-out`;
            toast.textContent = message;

            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.className = 'ml-2 text-white hover:text-gray-200 font-bold';
            closeBtn.onclick = () => removeToast(toastId);
            toast.appendChild(closeBtn);

            toastContainer.appendChild(toast);

            setTimeout(() => removeToast(toastId), 5000);
        }

        function removeToast(toastId) {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.style.transform = 'translateX(100%)';
                toast.style.opacity = '0';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }
        }

        // Auto-refresh every 60 seconds
        setTimeout(() => {
            location.reload();
        }, 60000);
    </script>
}

@functions {
    private string GetStatusBadgeClass(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.Applied => "bg-blue-100 text-blue-800",
            ApplicationStatus.Viewed => "bg-yellow-100 text-yellow-800",
            ApplicationStatus.Interview => "bg-purple-100 text-purple-800",
            ApplicationStatus.Accepted => "bg-green-100 text-green-800",
            ApplicationStatus.Rejected => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}

<!-- Hidden form for anti-forgery token -->
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>