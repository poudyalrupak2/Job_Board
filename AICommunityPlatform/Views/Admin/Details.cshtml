@model AICommunityPlatform.ViewModels.AdminJobDetailsViewModel
@{
    ViewData["Title"] = "Job Details - " + Model.Job.Title;
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="mb-8">
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="flex items-center space-x-4">
                    <li>
                        <a asp-action="Index" class="text-gray-400 hover:text-gray-500">
                            <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L9 5.414V17a1 1 0 102 0V5.414l5.293 5.293a1 1 0 001.414-1.414l-7-7z"></path>
                            </svg>
                            <span class="sr-only">Admin</span>
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <a asp-action="Jobs" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">Jobs</a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="ml-4 text-sm font-medium text-gray-500">@Model.Job.Title</span>
                        </div>
                    </li>
                </ol>
            </nav>

            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        @Model.Job.Title
                    </h2>
                    <div class="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-6">
                        <div class="mt-2 flex items-center text-sm text-gray-500">
                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v6.5A1.5 1.5 0 0116.5 17h-13A1.5 1.5 0 012 15.5V8a2 2 0 012-2h2z" clip-rule="evenodd"></path>
                            </svg>
                            @Model.Job.Type
                        </div>
                        <div class="mt-2 flex items-center text-sm text-gray-500">
                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                            </svg>
                            @Model.Job.Location
                        </div>
                        <div class="mt-2 flex items-center text-sm text-gray-500">
                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                            </svg>
                            Posted @Model.Job.PostedDate.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-3">
                    <a asp-action="Edit" asp-route-id="@Model.Job.Id" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                        </svg>
                        Edit Job
                    </a>
                    <button onclick="toggleJobStatus(@Model.Job.Id, @Model.Job.IsActive.ToString().ToLower())"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white @(Model.Job.IsActive ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700")">
                        @if (Model.Job.IsActive)
                        {
                            <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                            </svg>
                            <span>Deactivate</span>
                        }
                        else
                        {
                            <svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span>Activate</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        <!-- Status and Stats -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
            <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            @if (Model.Job.IsActive)
                            {
                                <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                            }
                            else
                            {
                                <div class="w-8 h-8 bg-red-500 rounded-md flex items-center justify-center">
                                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                            }
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Status</dt>
                                <dd class="text-lg font-medium text-gray-900">
                                    @(Model.Job.IsActive ? "Active" : "Inactive")
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Applications</dt>
                                <dd class="text-lg font-medium text-gray-900">@Model.TotalApplications</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
                                    <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Views</dt>
                                <dd class="text-lg font-medium text-gray-900">@Model.TotalViews</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                                @if (Model.Job.Salary.HasValue)
                                {
                                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                }
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Salary</dt>
                                <dd class="text-lg font-medium text-gray-900">
                                    @if (Model.Job.Salary.HasValue)
                                    {
                                        <span>$@Model.Job.Salary.Value.ToString("N0")</span>
                                    }
                                    else
                                    {
                                        <span>Not specified</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="lg:grid lg:grid-cols-3 lg:gap-8">
            <!-- Job Details -->
            <div class="lg:col-span-2">
                <!-- Job Information -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Job Information</h3>

                    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Organization</dt>
                            <dd class="mt-1 text-sm text-gray-900">@Model.Job.Organization.DisplayName</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Job Type</dt>
                            <dd class="mt-1 text-sm text-gray-900">@Model.Job.Type</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Location</dt>
                            <dd class="mt-1 text-sm text-gray-900">
                                @Model.Job.Location
                                @if (Model.Job.IsRemote)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 ml-2">
                                        Remote
                                    </span>
                                }
                            </dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Posted Date</dt>
                            <dd class="mt-1 text-sm text-gray-900">@Model.Job.PostedDate.ToString("MMM dd, yyyy 'at' h:mm tt")</dd>
                        </div>
                        @if (Model.Job.Deadline.HasValue)
                        {
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Application Deadline</dt>
                                <dd class="mt-1 text-sm text-gray-900">@Model.Job.Deadline.Value.ToString("MMM dd, yyyy")</dd>
                            </div>
                        }
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Status</dt>
                            <dd class="mt-1">
                                @if (Model.Job.IsActive)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        Active
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        Inactive
                                    </span>
                                }
                            </dd>
                        </div>
                    </div>
                </div>

                <!-- Job Description -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Job Description</h3>
                    <div class="prose max-w-none">
                        <p class="text-gray-700 whitespace-pre-line">@Model.Job.Description</p>
                    </div>
                </div>

                <!-- Job Requirements -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Requirements</h3>
                    <div class="prose max-w-none">
                        <p class="text-gray-700 whitespace-pre-line">@Model.Job.Requirements</p>
                    </div>
                </div>

                <!-- Recent Applications -->
                @if (Model.Applications.Any())
                {
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Recent Applications</h3>
                        </div>
                        <ul class="divide-y divide-gray-200">
                            @foreach (var application in Model.Applications.Take(10))
                            {
                                <li class="px-6 py-4">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-10 w-10">
                                                @if (!string.IsNullOrEmpty(application.User.ProfilePicture))
                                                {
                                                    <img class="h-10 w-10 rounded-full object-cover" src="@application.User.ProfilePicture" alt="@application.User.DisplayName">
                                                }
                                                else
                                                {
                                                    <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                                                        <span class="text-sm font-medium text-gray-700">
                                                            @application.User.FirstName.Substring(0, 1)@application.User.LastName.Substring(0, 1)
                                                        </span>
                                                    </div>
                                                }
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@application.User.DisplayName</div>
                                                <div class="text-sm text-gray-500">Applied @application.AppliedDate.ToString("MMM dd, yyyy")</div>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(application.Status)">
                                                @application.Status
                                            </span>
                                            <a asp-controller="Admin" asp-action="Applications" asp-route-jobId="@Model.Job.Id"
                                               class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                                                View
                                            </a>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                        @if (Model.Applications.Count > 10)
                        {
                            <div class="px-6 py-3 border-t border-gray-200 text-center">
                                <a asp-controller="Admin" asp-action="Applications" asp-route-jobId="@Model.Job.Id"
                                   class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                                    View all @Model.TotalApplications applications →
                                </a>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="mt-6 lg:mt-0 lg:col-span-1">
                <!-- Application Statistics -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Application Statistics</h3>

                    @if (Model.ApplicationsByStatus.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var statusGroup in Model.ApplicationsByStatus)
                            {
                                <div class="flex justify-between items-center">
                                    <div class="flex items-center">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(statusGroup.Key)">
                                            @statusGroup.Key
                                        </span>
                                    </div>
                                    <span class="text-sm font-medium text-gray-900">@statusGroup.Value</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="@GetStatusBarClass(statusGroup.Key) h-2 rounded-full"
                                         style="width: @(Model.TotalApplications > 0 ? (statusGroup.Value * 100.0 / Model.TotalApplications).ToString("F1") : "0")%"></div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">No applications yet</p>
                    }
                </div>

                <!-- Quick Actions -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
                    <div class="space-y-3">
                        <a asp-action="Edit" asp-route-id="@Model.Job.Id"
                           class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-1 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                            </svg>
                            Edit Job
                        </a>

                        <a asp-controller="Admin" asp-action="Applications" asp-route-jobId="@Model.Job.Id"
                           class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-1 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            View All Applications
                        </a>

                        <button onclick="duplicateJob(@Model.Job.Id)"
                                class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-1 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M7 9a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H9a2 2 0 01-2-2V9z"></path>
                                <path d="M5 3a2 2 0 00-2 2v6a2 2 0 002 2V5h8a2 2 0 00-2-2H5z"></path>
                            </svg>
                            Duplicate Job
                        </button>

                        <button onclick="exportApplications(@Model.Job.Id)"
                                class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-1 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                            Export Applications
                        </button>
                    </div>
                </div>

                <!-- Organization Info -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Organization</h3>
                    <div class="flex items-center mb-4">
                        <div class="flex-shrink-0 h-12 w-12">
                            @if (!string.IsNullOrEmpty(Model.Job.Organization.ProfilePicture))
                            {
                                <img class="h-12 w-12 rounded-full object-cover" src="@Model.Job.Organization.ProfilePicture" alt="@Model.Job.Organization.DisplayName">
                            }
                            else
                            {
                                <div class="h-12 w-12 rounded-full bg-gray-300 flex items-center justify-center">
                                    <span class="text-lg font-medium text-gray-700">
                                        @Model.Job.Organization.FirstName.Substring(0, 1)@Model.Job.Organization.LastName.Substring(0, 1)
                                    </span>
                                </div>
                            }
                        </div>
                        <div class="ml-4">
                            <div class="text-lg font-medium text-gray-900">@Model.Job.Organization.DisplayName</div>
                            <div class="text-sm text-gray-500">@Model.Job.Organization.Role</div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Job.Organization.Bio))
                    {
                        <p class="text-sm text-gray-600 mb-4">@Model.Job.Organization.Bio</p>
                    }

                    <div class="space-y-2 text-sm text-gray-500">
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                            </svg>
                            @Model.Job.Organization.Email
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Job.Organization.Phone))
                        {
                            <div class="flex items-center">
                                <svg class="flex-shrink-0 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                                </svg>
                                @Model.Job.Organization.Phone
                            </div>
                        }
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                            </svg>
                            Member since @Model.Job.Organization.CreatedAt.ToString("MMM yyyy")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50"></div>

@section Scripts {
    <script>
        // Toggle job status
        function toggleJobStatus(jobId, currentStatus) {
            const action = currentStatus ? 'deactivate' : 'activate';
            if (!confirm(`Are you sure you want to ${action} this job?`)) {
                return;
            }

            fetch('/Admin/ToggleJobStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `jobId=${jobId}&__RequestVerificationToken=${getAntiForgeryToken()}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(data.message || 'Failed to update job status', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating job status', 'error');
            });
        }

        // Duplicate job
        function duplicateJob(jobId) {
            if (!confirm('Are you sure you want to duplicate this job?')) {
                return;
            }

            fetch('/Admin/DuplicateJob', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `jobId=${jobId}&__RequestVerificationToken=${getAntiForgeryToken()}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Job duplicated successfully!', 'success');
                    setTimeout(() => {
                        window.location.href = `/Admin/Jobs/${data.newJobId}`;
                    }, 1000);
                } else {
                    showToast(data.message || 'Failed to duplicate job', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error duplicating job', 'error');
            });
        }

        // Export applications
        function exportApplications(jobId) {
            window.location.href = `/Admin/ExportApplications?jobId=${jobId}`;
            showToast('Exporting applications...', 'info');
        }

        // Get anti-forgery token
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now();

            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `mb-2 px-4 py-2 rounded-md text-white shadow-lg ${colors[type]} transform transition-all duration-300 ease-in-out`;
            toast.textContent = message;

            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.className = 'ml-2 text-white hover:text-gray-200';
            closeBtn.onclick = () => removeToast(toastId);
            toast.appendChild(closeBtn);

            toastContainer.appendChild(toast);

            setTimeout(() => removeToast(toastId), 5000);
        }

        function removeToast(toastId) {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.style.transform = 'translateX(100%)';
                toast.style.opacity = '0';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }
        }
    </script>
}

@functions {
    private string GetStatusBadgeClass(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.Applied => "bg-blue-100 text-blue-800",
            ApplicationStatus.Rejected => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusBarClass(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.Applied => "bg-blue-600",
            ApplicationStatus.Accepted => "bg-yellow-600",
            ApplicationStatus.Interview => "bg-purple-600",
            ApplicationStatus.Withdrawn => "bg-green-600",
            ApplicationStatus.Rejected => "bg-red-600",
            _ => "bg-gray-600"
        };
    }
}