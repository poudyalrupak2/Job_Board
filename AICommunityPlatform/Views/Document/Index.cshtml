@model IEnumerable<AICommunityPlatform.Models.UserDocument>
@{
    ViewData["Title"] = "My Documents";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">My Documents</h1>
                    <p class="text-gray-600">Manage your resumes, cover letters, and other documents</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button id="uploadBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        Upload Document
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Upload Form (Initially Hidden) -->
        <div id="uploadForm" class="hidden bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Upload New Document</h2>
            <form id="documentUploadForm" enctype="multipart/form-data" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Document Type</label>
                        <select name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="">Select document type</option>
                            <option value="Resume">Resume/CV</option>
                            <option value="CoverLetter">Cover Letter</option>
                            <option value="Portfolio">Portfolio</option>
                            <option value="Certificate">Certificate</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">File</label>
                        <input type="file" name="file" accept=".pdf,.doc,.docx,.txt" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <p class="text-xs text-gray-500 mt-1">Supported formats: PDF, DOC, DOCX, TXT (Max 10MB)</p>
                    </div>
                </div>

                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancelUpload" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">
                        Upload Document
                    </button>
                </div>
            </form>
        </div>

        <!-- Documents List -->
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Your Documents</h2>
            </div>

            <div class="divide-y divide-gray-200">
                @foreach (var document in Model)
                {
                    <div class="p-6 hover:bg-gray-50 transition-colors">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="flex-shrink-0">
                                    @{
                                        var iconClass = document.Type switch
                                        {
                                            AICommunityPlatform.Models.DocumentType.Resume => "bg-blue-100 text-blue-600",
                                            AICommunityPlatform.Models.DocumentType.CoverLetter => "bg-green-100 text-green-600",
                                            AICommunityPlatform.Models.DocumentType.Portfolio => "bg-purple-100 text-purple-600",
                                            AICommunityPlatform.Models.DocumentType.Certificate => "bg-yellow-100 text-yellow-600",
                                            _ => "bg-gray-100 text-gray-600"
                                        };
                                    }
                                    <div class="p-2 @iconClass rounded-lg">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                        </svg>
                                    </div>
                                </div>

                                <div class="flex-1">
                                    <div class="flex items-center">
                                        <h3 class="text-sm font-medium text-gray-900">@document.FileName</h3>
                                        @if (document.IsDefault)
                                        {
                                            <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800">
                                                Default
                                            </span>
                                        }
                                    </div>
                                    <div class="flex items-center text-sm text-gray-500 mt-1">
                                        <span class="capitalize">@document.Type.ToString()</span>
                                        <span class="mx-2">•</span>
                                        <span>@FormatFileSize(document.FileSize)</span>
                                        <span class="mx-2">•</span>
                                        <span>Uploaded @document.UploadedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                </div>
                            </div>

                            <div class="flex items-center space-x-2">
                                @if (!document.IsDefault)
                                {
                                    <button onclick="setDefault(@document.Id)" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                                        Set as Default
                                    </button>
                                }

                                <a href="/Document/Download/@document.Id" class="text-gray-400 hover:text-indigo-600 transition-colors">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-4-4m4 4l4-4m-4 4V3m0 0h8"></path>
                                    </svg>
                                </a>

                                <button onclick="deleteDocument(@document.Id)" class="text-gray-400 hover:text-red-600 transition-colors">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }

                @if (!Model.Any())
                {
                    <div class="p-12 text-center">
                        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No documents uploaded</h3>
                        <p class="text-gray-600 mb-4">Upload your resume, cover letters, and other documents to apply for jobs quickly.</p>
                        <button onclick="document.getElementById('uploadBtn').click()" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                            Upload First Document
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Tips Section -->
        <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-blue-900 mb-3">Document Tips</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <h4 class="font-medium text-blue-800 mb-2">Resume Best Practices</h4>
                    <ul class="text-sm text-blue-700 space-y-1">
                        <li>• Keep it concise (1-2 pages)</li>
                        <li>• Use action verbs and quantify achievements</li>
                        <li>• Tailor to each job application</li>
                        <li>• Include relevant AI/ML skills</li>
                    </ul>
                </div>
                <div>
                    <h4 class="font-medium text-blue-800 mb-2">File Guidelines</h4>
                    <ul class="text-sm text-blue-700 space-y-1">
                        <li>• PDF format is preferred</li>
                        <li>• Keep file size under 10MB</li>
                        <li>• Use clear, descriptive filenames</li>
                        <li>• Set your main resume as default</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

@section Scripts {
    <script>
        // Upload form toggle
        document.getElementById('uploadBtn').addEventListener('click', function() {
            document.getElementById('uploadForm').classList.toggle('hidden');
        });

        document.getElementById('cancelUpload').addEventListener('click', function() {
            document.getElementById('uploadForm').classList.add('hidden');
        });

        // Document upload
        document.getElementById('documentUploadForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.textContent = 'Uploading...';
            submitBtn.disabled = true;

            fetch('/Document/Upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    location.reload(); // Refresh to show new document
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error uploading document', 'error');
            })
            .finally(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        });

        // Set default document
        function setDefault(documentId) {
            fetch('/Document/SetDefault', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: documentId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    location.reload();
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error setting default document', 'error');
            });
        }

        // Delete document
        function deleteDocument(documentId) {
            if (confirm('Are you sure you want to delete this document?')) {
                fetch('/Document/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: documentId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        location.reload();
                    } else {
                        showToast(data.message, 'error');
                    }
                })
                .catch(error => {
                    showToast('Error deleting document', 'error');
                });
            }
        }

        // Toast notifications
        function showToast(message, type) {
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${colors[type]}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // File validation
        document.querySelector('input[type="file"]').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 10 * 1024 * 1024; // 10MB
                const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];

                if (file.size > maxSize) {
                    showToast('File size must be under 10MB', 'error');
                    e.target.value = '';
                    return;
                }

                if (!allowedTypes.includes(file.type)) {
                    showToast('Only PDF, DOC, DOCX, and TXT files are allowed', 'error');
                    e.target.value = '';
                    return;
                }
            }
        });
    </script>
}